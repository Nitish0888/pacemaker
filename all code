// const int potPin       = 32;  // Potentiometer input
// const int heartbeatOut = 18;  // Simulated pulse generator
// const int heartbeatIn  = 4;   // Simulated heartbeat input
// const int heartbeatLED = 25;  // LED on beat detected
// const int stimulusLED  = 26;  // LED on stimulation

// volatile int pulseCount = 0;
// volatile bool pulseDetectedFlag = false;

// unsigned long lastHeartbeatOutTime = 0;
// unsigned long heartbeatInterval = 1000; // Adjusted by pot
// unsigned long lastSecondCheck = 0;

// unsigned long heartbeatLEDBlinkStart = 0;
// // bool heartbeatLEDBlinking = false;

// void IRAM_ATTR onPulseDetected() {
//   pulseCount++;
//   pulseDetectedFlag = true;
// }

// void setup() {
//   pinMode(potPin, INPUT);
//   pinMode(heartbeatOut, OUTPUT);
//   pinMode(heartbeatIn, INPUT);
//   pinMode(heartbeatLED, OUTPUT);
//   pinMode(stimulusLED, OUTPUT);

//   Serial.begin(115200);
//   delay(1000);
//   Serial.println("Pacemaker Simulation Started");

//   attachInterrupt(digitalPinToInterrupt(heartbeatIn), onPulseDetected, RISING);

//   lastSecondCheck = millis();
// }

// void loop() {
//   unsigned long currentTime = millis();

//   // === 1. Simulate Heartbeat Output ===
//   int potVal = analogRead(potPin); // 0‚Äì4095
//   heartbeatInterval = map(potVal, 0, 4095, 300, 1200);  // 0.8Hz to ~3.3Hz

//   if (currentTime - lastHeartbeatOutTime >= heartbeatInterval) {
//     digitalWrite(heartbeatOut, HIGH);
//     delay(10); // 10ms pulse
//     digitalWrite(heartbeatOut, LOW);
//     lastHeartbeatOutTime = currentTime;
//   }

//   // === 2. Handle Pulse Detected ===
//   if (pulseDetectedFlag) {
//     pulseDetectedFlag = false;

//     // Blink heartbeat LED
//     digitalWrite(heartbeatLED, HIGH);
//     heartbeatLEDBlinkStart = currentTime;
//     heartbeatLEDBlinking = true;

//     Serial.println("[Pulse Detected] Heartbeat received.");
//   }

//   // === 3. Turn off Heartbeat LED after 50 ms ===
//   if (heartbeatLEDBlinking && (currentTime - heartbeatLEDBlinkStart >= 50)) {
//     digitalWrite(heartbeatLED, LOW);
//     heartbeatLEDBlinking = false;
//   }

//   // === 4. 1-Second Timer Check for Missed Pulse ===
//   if (currentTime - lastSecondCheck >= 1000) {
//     noInterrupts();
//     int beats = pulseCount;
//     pulseCount = 0;
//     interrupts();

//     if (beats == 0) {
//       Serial.print("[Stimulus Triggered] No beat detected ‚Üí BPM: 0 ‚Üí Time: ");
//       Serial.print(currentTime);
//       Serial.println(" ms");

//       digitalWrite(stimulusLED, HIGH);
//       delay(50);
//       digitalWrite(stimulusLED, LOW);
//     } else {
//       int bpm = beats * 60;  // convert to BPM
//       Serial.print("[Heartbeat OK] Beats in last second: ");
//       Serial.print(beats);
//       Serial.print(" ‚Üí BPM: ");
//       Serial.println(bpm);
//     }

//     lastSecondCheck = currentTime;  // Reset timer after decision
//   }
// }
#include <WiFi.h>
#include <WebServer.h>

// ===== WiFi Credentials =====
const char* ssid = "Vinit";           // üîÅ Replace with your Wi-Fi SSID
const char* password = "Deshmukh#10";   // üîÅ Replace with your Wi-Fi Password

// ===== Web Server =====
WebServer server(80); // Default HTTP port

// ===== GPIO Pins =====
const int heartbeatOut = 18;  // Simulated pulse generator
const int heartbeatIn  = 4;   // Pulse input from heart
const int heartbeatLED = 25;  // LED when pulse detected
const int stimulusLED  = 26;  // LED for stimulation pulse

// ===== Timing and BPM Control =====
int bpmSetting = 60;                     // üí° Controlled via Web Interface
unsigned long heartbeatInterval = 1000;  // ‚Üê Derived from bpmSetting

unsigned long lastHeartbeatOutTime = 0;
unsigned long lastSecondCheck = 0;
unsigned long heartbeatLEDBlinkStart = 0;
bool heartbeatLEDBlinking = false;

// ===== Pulse Detection =====
volatile int pulseCount = 0;
volatile bool pulseDetectedFlag = false;

// ===== Interrupt Service Routine =====
void IRAM_ATTR onPulseDetected() {
  pulseCount++;
  pulseDetectedFlag = true;
}

// ===== HTTP Routes =====

// Homepage with BPM control
void handleRoot() {
  String html = "<html><body><h1>Pacemaker Control Panel</h1>"
                "<form action=\"/set\" method=\"get\">"
                "Set BPM: <input type=\"number\" name=\"bpm\" min=\"30\" max=\"180\" value=\"" + String(bpmSetting) + "\">"
                "<input type=\"submit\" value=\"Update\">"
                "</form>"
                "<p>Current BPM: " + String(bpmSetting) + "</p></body></html>";
  server.send(200, "text/html", html);
}

// Handle BPM update from web
void handleSetBPM() {
  if (server.hasArg("bpm")) {
    bpmSetting = server.arg("bpm").toInt();
    heartbeatInterval = 60000 / bpmSetting; // üîÅ Update heartbeatInterval
    Serial.println("Updated BPM via Web: " + String(bpmSetting));
  }
  server.sendHeader("Location", "/");
  server.send(303);
}

// ===== Setup =====
void setup() {
  Serial.begin(115200);
  delay(1000);

  // Setup GPIO
  pinMode(heartbeatOut, OUTPUT);
  pinMode(heartbeatIn, INPUT);
  pinMode(heartbeatLED, OUTPUT);
  pinMode(stimulusLED, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(heartbeatIn), onPulseDetected, RISING);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected. IP: " + WiFi.localIP().toString());

  // Setup Web Server
  server.on("/", handleRoot);
  server.on("/set", handleSetBPM);
  server.begin();

  lastSecondCheck = millis();
}

// ===== Loop =====
void loop() {
  server.handleClient(); // ‚ö° Serve web requests

  unsigned long currentTime = millis();

  // === Simulate Heartbeat Output ===
  if (currentTime - lastHeartbeatOutTime >= heartbeatInterval) {
    digitalWrite(heartbeatOut, HIGH);
    delay(10); // Pulse width
    digitalWrite(heartbeatOut, LOW);
    lastHeartbeatOutTime = currentTime;
  }

  // === Pulse Detected Action ===
  if (pulseDetectedFlag) {
    pulseDetectedFlag = false;
    digitalWrite(heartbeatLED, HIGH);
    heartbeatLEDBlinkStart = currentTime;
    heartbeatLEDBlinking = true;
    Serial.println("[Pulse Detected]");
  }

  // === Turn Off Pulse LED ===
  if (heartbeatLEDBlinking && (currentTime - heartbeatLEDBlinkStart >= 50)) {
    digitalWrite(heartbeatLED, LOW);
    heartbeatLEDBlinking = false;
  }

  // === Check for Missed Beat (1s Timer) ===
  if (currentTime - lastSecondCheck >= 1000) {
    noInterrupts();
    int beats = pulseCount;
    pulseCount = 0;
    interrupts();

    if (beats == 0) {
      Serial.println("[Stimulus Triggered] No natural beat detected.");
      digitalWrite(stimulusLED, HIGH);
      delay(50);
      digitalWrite(stimulusLED, LOW);
    } else {
      int bpm = beats * 60;
      Serial.println("[Heartbeat OK] BPM: " + String(bpm));
    }

    lastSecondCheck = currentTime;
  }
}
